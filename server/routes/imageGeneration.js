// backend/routes/imageGeneration.js - Using OpenAI DALL·E

const express = require('express');
const OpenAI = require('openai');
const router = express.Router();

// Initialize OpenAI with your API key
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY || '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'
});

// Health check endpoint
router.get('/health', (req, res) => {
  res.json({ status: 'ok', service: 'imagen-generation' });
});

// Image generation using OpenAI DALL·E
router.post('/generate-image-imagen', async (req, res) => {
  try {
    const { prompt, aspectRatio = '1:1', numberOfImages = 1, language = 'en' } = req.body;

    if (!prompt) {
      return res.status(400).json({ 
        success: false, 
        error: 'Prompt is required' 
      });
    }

    console.log('Generating image with OpenAI DALL·E for prompt:', prompt, 'language:', language);
    
    // Create a DALL·E optimized prompt with language-specific ethnic representation
    let ethnicInstruction = '';
    if (language === 'es' || language === 'fr' || language === 'de' || language === 'it') {
      ethnicInstruction = 'Show people with European/Caucasian features.';
    } else if (language === 'zh' || language === 'ja' || language === 'ko') {
      ethnicInstruction = 'Show people with Asian features.';
    } else if (language === 'ar' || language === 'he') {
      ethnicInstruction = 'Show people with Middle Eastern features.';
    } else if (language === 'hi' || language === 'bn') {
      ethnicInstruction = 'Show people with South Asian features.';
    } else {
      ethnicInstruction = 'Show people with diverse ethnicities including white, black, Asian, Hispanic, and Middle Eastern people.';
    }
    
    const dallePrompt = `Create a simple, clear illustration showing: ${prompt}. 
    Style: cartoon illustration, simple graphics, clean design, bright colors, clear outlines. 
    Suitable for AAC (Augmentative and Alternative Communication). 
    Make it easily recognizable and understandable. 
    Minimal background details.
    ${ethnicInstruction}
    Avoid stereotyping - represent people naturally and respectfully.
    The image should be culturally appropriate and accessible.`;
    
    console.log('DALL·E prompt:', dallePrompt);
    
    // Generate image with DALL·E
    const response = await openai.images.generate({
      model: "dall-e-3",
      prompt: dallePrompt,
      n: numberOfImages,
      size: "1024x1024",
      quality: "standard",
      style: "natural"
    });

    console.log('DALL·E response received:', !!response);
    
    if (!response.data || response.data.length === 0) {
      return res.status(500).json({
        success: false,
        error: 'No image generated by DALL·E'
      });
    }

    const images = response.data.map(image => ({
      url: image.url,
      mimeType: 'image/png',
      description: `AI-generated image for: ${prompt}`
    }));

    console.log('Sending successful response with', images.length, 'images');

    res.json({
      success: true,
      images: images,
      prompt: prompt,
      model: 'dall-e-3'
    });

  } catch (error) {
    console.error('Error generating image with DALL·E:', error);
    console.error('Full error details:', error.message);
    res.status(500).json({ 
      success: false,
      error: 'Failed to generate image with DALL·E',
      details: error.message 
    });
  }
});

// Alternative: Using Vertex AI directly for Imagen 2
router.post('/generate-image-vertex', async (req, res) => {
  try {
    const { prompt, aspectRatio = '1:1', numberOfImages = 1, safetyFilterLevel = 'block_some' } = req.body;

    console.log('Received image generation request:');
    console.log('- Prompt:', prompt);
    console.log('- Aspect ratio:', aspectRatio);
    console.log('- Number of images:', numberOfImages);

    if (!prompt) {
      console.log('Error: No prompt provided');
      return res.status(400).json({ 
        success: false, 
        error: 'Prompt is required' 
      });
    }

    console.log('API Key available:', !!process.env.GEMINI_API_KEY);

    // Install: npm install @google-cloud/aiplatform
    const { PredictionServiceClient } = require('@google-cloud/aiplatform');
    
    const client = new PredictionServiceClient({
      apiEndpoint: 'us-central1-aiplatform.googleapis.com'
    });

    const endpoint = `projects/${process.env.GOOGLE_CLOUD_PROJECT}/locations/us-central1/publishers/google/models/imagegeneration@006`;

    console.log('Using endpoint:', endpoint);

    const instanceValue = {
      prompt: prompt,
      sampleCount: numberOfImages,
      aspectRatio: aspectRatio,
      safetyFilterLevel: safetyFilterLevel,
      personGeneration: 'dont_allow'
    };

    const instance = client.helpers.toValue(instanceValue);
    const instances = [instance];

    const request = {
      endpoint,
      instances,
    };

    console.log('Generating image with Vertex AI Imagen for prompt:', prompt);
    
    const [response] = await client.predict(request);
    console.log('Vertex AI response received:', !!response);
    const predictions = response.predictions;

    if (!predictions || predictions.length === 0) {
      console.log('Error: No predictions received from Vertex AI');
      return res.status(500).json({
        success: false,
        error: 'No predictions received from Vertex AI'
      });
    }

    console.log('Number of predictions received:', predictions.length);

    const images = predictions.map(prediction => {
      const predictionValue = client.helpers.fromValue(prediction);
      console.log('Prediction value:', predictionValue);
      return {
        bytesBase64Encoded: predictionValue.bytesBase64Encoded,
        mimeType: predictionValue.mimeType || 'image/png'
      };
    });

    console.log('Sending successful response with', images.length, 'images');

    res.json({
      success: true,
      images: images,
      prompt: prompt,
      model: 'imagen-2-vertex'
    });

  } catch (error) {
    console.error('Error generating image with Vertex AI:', error);
    console.error('Full error details:', error.message);
    console.error('Error stack:', error.stack);
    res.status(500).json({ 
      success: false,
      error: 'Failed to generate image with Vertex AI',
      details: error.message 
    });
  }
});

module.exports = router; 